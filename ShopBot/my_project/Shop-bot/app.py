
import os
import handlers
from handlers.user.menu import user_menu, admin_menu
from aiogram import executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from data import config
from loader import dp, db, bot
import filters
import logging

filters.setup(dp)

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 5000))
user_message = '–°—Ç–∞—Ä—Ç'
admin_message = '–ê–¥–º–∏–Ω'


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    cid = message.chat.id
    if cid in config.ADMINS:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(user_message, admin_message)
        await message.answer('''–ü—Ä–∏–≤–µ—Ç –±–æ—Å—Å! –ö–∞–∫ –∂–∏–∑–Ω—å? üëãüèª
        ''', reply_markup=markup)
    else:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(user_message)
        await message.answer(
            '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëãüèª
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ:
‚Ä¢ –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –±–µ–∑ —É—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.
‚Ä¢ –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–∞—Å—á–∏—Ç–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ —Å —É—á—ë—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å–∫–∏–¥–æ–∫!
            ''', reply_markup=markup)
        await message.answer(
            '''–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—à–∏—Ö —É—Å–ª—É–≥:
           ''', reply_markup=markup)


@dp.message_handler(text=user_message)
async def user_mode(message: types.Message):
    await user_menu(message)


@dp.message_handler(text=admin_message)
async def admin_mode(message: types.Message):

    cid = message.chat.id
    if cid not in config.ADMINS:
        config.ADMINS.append(cid)

    await message.answer('–í–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=ReplyKeyboardRemove())
    await admin_menu(message)


async def on_startup(dp):
    logging.basicConfig(level=logging.INFO)
    db.create_tables()

    await bot.delete_webhook()
    await bot.set_webhook(config.WEBHOOK_URL)


async def on_shutdown():
    logging.warning("Shutting down..")
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning("Bot down")


if __name__ == '__main__':

    if "HEROKU" in list(os.environ.keys()):

        executor.start_webhook(
            dispatcher=dp,
            webhook_path=config.WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            host=WEBAPP_HOST,
            port=WEBAPP_PORT,
        )

    else:

        executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
